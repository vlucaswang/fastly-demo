# Cloudflare DNS Record

resource "cloudflare_dns_record" "this_validation_dns_record" {
  depends_on = [fastly_tls_subscription.this_service]

  for_each = {
    for domain in fastly_tls_subscription.this_service.domains :
    replace(domain, "*.", "") => element([
      for obj in fastly_tls_subscription.this_service.managed_dns_challenges :
      obj if obj.record_name == "_acme-challenge.${replace(domain, "*.", "")}" # We use an `if` conditional to filter the list to a single element
    ], 0)...                                                                   # `element()` returns the first object in the list which should be the relevant 'challenge' object we need
    # The ellipsis ... avoids Terraform complaining that the resulting object will contain multiple keys that are duplicates (e.g. multiple 'example.com' keys).
    # It essentially groups the 'values' (the single challenge) under the common key (the normalised domain).
    # Then below we extract the first value (as they'll all be the same 'challenge' value).
  }

  zone_id = var.cloudflare_zone_id
  comment = "Fastly demo verification record"
  name    = each.value[0].record_name
  content = each.value[0].record_value
  ttl     = 60
  type    = each.value[0].record_type
}

resource "cloudflare_dns_record" "this_service_dns_record" {
  depends_on = [fastly_tls_subscription_validation.this_service]

  for_each = toset(var.fastly_domains)

  zone_id = var.cloudflare_zone_id
  comment = "Fastly demo service record"
  name    = each.value
  content = element([for dns_record in data.fastly_tls_configuration.this_service.dns_records : dns_record.record_value if dns_record.record_type == "CNAME"], 0)
  ttl     = 600
  type    = "CNAME"
}

# Fastly Service

resource "fastly_service_vcl" "this_service" {
  name = "Fastly demo service"

  dynamic "domain" {
    for_each = var.tls_domains

    content {
      name    = domain.value
      comment = "${domain.value} service domain"
    }
  }

  backend {
    address = "fastly-demo.vlucaswang.com"
    name    = "http-test-resources-80"
    port    = 80
    shield  = var.shield
  }

  dynamic "request_setting" {
    for_each = var.request_settings
    content {
      name      = request_setting.value.name
      force_ssl = request_setting.value.force_ssl
    }
  }

  dynamic "condition" {
    for_each = var.condition
    content {
      name      = condition.value.name
      priority  = condition.value.priority
      statement = condition.value.statement
      type      = condition.value.type
    }
  }

  response_object {
    content           = file("${path.module}/files/robots.txt")
    content_type      = "text/plain"
    name              = "Generated by synthetic response for robots.txt"
    request_condition = "Generated by synthetic response for robots.txt"
    response          = "OK"
    status            = 200
  }

  response_object {
    cache_condition = "Generated by synthetic response for 404 page"
    content         = <<-EOT
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                <title>404</title>
              </head>
              <body>
                Hello, 404
              </body>
            </html>
        EOT
    content_type    = "text/html"
    name            = "Generated by synthetic response for 404 page"
    response        = "Not Found"
    status          = 404
  }

  response_object {
    cache_condition = "Generated by synthetic response for 503 page"
    content         = <<-EOT
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                <title>503</title>
              </head>
              <body>
                Hello, 503
              </body>
            </html>
        EOT
    content_type    = "text/html"
    name            = "Generated by synthetic response for 503 page"
    response        = "Service Unavailable"
    status          = 503
  }

  vcl {
    content = file("${path.module}/vcl/main.vcl")
    main    = true
    name    = "custom_vcl"
  }

  logging_newrelic {
    name   = "New Relic"
    token  = var.newrelic_log_license_key
    format = file("${path.module}/files/newrelic_log_format.txt")
  }

  force_destroy = var.service_force_destroy
}

resource "fastly_tls_subscription" "this_service" {
  domains               = fastly_service_vcl.this_service.domain[*].name
  certificate_authority = var.tls_certificate_authority
  force_update          = var.tls_force_update
  force_destroy         = var.tls_force_destroy
}

data "fastly_tls_configuration" "this_service" {
  id = fastly_tls_subscription.this_service.configuration_id
}

resource "fastly_tls_subscription_validation" "this_service" {
  depends_on      = [cloudflare_dns_record.this_validation_dns_record]
  subscription_id = fastly_tls_subscription.this_service.id
}
